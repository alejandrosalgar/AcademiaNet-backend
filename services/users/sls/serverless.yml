service: ${self:custom.common.service}users
frameworkVersion: ${self:custom.common.frameworkVersion}

plugins:
  - serverless-python-requirements
  - serverless-export-env
  - serverless-prune-plugin
  - serverless-deployment-bucket
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: ${self:custom.common.provider.runtime}

  region: ${self:custom.common.provider.region}
  stage: ${self:custom.common.provider.stage}

  deploymentBucket:
    name: ${self:custom.common.service}-${self:provider.stage}-deployment-s3bucketenvironment
    
  memorySize: ${self:custom.common.provider.memorySize}
  timeout: ${self:custom.common.provider.timeout}

  environment:
    APP_NAME: ${self:custom.common.service}-${self:custom.common.provider.stage}
    SERVICE_NAME: users
    CORALOGIX_SECRET: 
      Fn::ImportValue: ${self:custom.common.service}core-${self:provider.stage}-CoralogixSecret
    REGION_NAME: ${self:provider.region}
    STAGE: ${self:provider.stage}
    PROFILE: ${self:custom.common.environment.PROFILE}
    RESOURCE_METHOD: ${self:custom.common.environment.RESOURCE_METHOD}
    CUSTOM_LOGGER_TABLE_NAME:
      Fn::ImportValue: ${self:custom.common.service}core-${self:provider.stage}-CustomLoggerTable
    DATABASE_NAME: 
      Fn::ImportValue: ${self:custom.common.service}core-${self:provider.stage}-DatabaseName
    DB_CLUSTER_ARN:
      Fn::ImportValue: ${self:custom.common.service}core-${self:provider.stage}-DbClusterARN
    DB_CREDENTIALS_SECRETS_STORE_ARN:
      Fn::ImportValue: ${self:custom.common.service}core-${self:provider.stage}-DbCredentialsSecretsStoreARN
    APPKEY_SECRET_ARN:
      Fn::ImportValue: ${self:custom.common.service}core-${self:provider.stage}-AppKeySecretARN

  apiGateway:
    restApiId:
      Fn::ImportValue: ${self:custom.common.service}core-${self:provider.stage}-ExtApiGatewayRestApiId
    restApiRootResourceId:
      Fn::ImportValue: ${self:custom.common.service}core-${self:provider.stage}-ExtApiGatewayRestApiRootResourceId

  iam:
    role:
      statements:
        - Effect: "Allow"
          Resource:
            - Fn::ImportValue: ${self:custom.common.service}core-${self:provider.stage}-CoralogixSecret
            - Fn::ImportValue: ${self:custom.common.service}core-${self:provider.stage}-AppKeySecretARN
            - Fn::ImportValue: ${self:custom.common.service}core-${self:provider.stage}-DbCredentialsSecretsStoreARN
          Action:
            - secretsmanager:GetSecretValue
        - Effect: "Allow"
          Resource:
            Fn::ImportValue: ${self:custom.common.service}core-${self:provider.stage}-DbClusterARN
          Action:
            - rds-data:ExecuteStatement
            - rds-data:BeginTransaction
            - rds-data:CommitTransaction
            - rds-data:RollbackTransaction
        - Effect: "Allow"
          Resource:
            Fn::ImportValue: ${self:custom.common.service}core-${self:provider.stage}-CustomLoggerTableARN
          Action:
            - dynamodb:GetItem
            - dynamodb:PutItem

  layers:
    - Ref: PythonRequirementsLambdaLayer
    - Ref: UtilsLambdaLayer

package: 
  individually: true
  patterns:
    - '!./**'

layers:
  Utils:
    name: ${self:service}-${self:provider.stage}-utils
    package:
      artifact: ./../../../Utils.zip

functions:
  - ${file(./functions/users.yml)}

custom:
  common: ${file(./../../../serverless.common.yml)}
  pythonRequirements: ${self:custom.common.pythonRequirements}
  export-env: ${self:custom.common.export-env}
  prune: ${self:custom.common.prune}
  serverless-iam-roles-per-function:
    defaultInherit: true
